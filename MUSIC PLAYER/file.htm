<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Music Player</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            background: linear-gradient(135deg, #1e3a8a, #9333ea);
        }
        .spin {
            animation: spin 4s linear infinite;
        }
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="flex items-center justify-center h-screen text-white">

    <div class="bg-white bg-opacity-10 p-6 rounded-lg shadow-lg text-center w-96">
        <h1 class="text-2xl font-bold mb-4">üéµ Modern Music Player</h1>
        <img id="albumArt" src="https://via.placeholder.com/100" class="w-24 h-24 mx-auto rounded-full spin" alt="Album Art">
        <h2 id="songTitle" class="mt-3 text-lg font-semibold">Song Name</h2>
        <audio id="audioPlayer" src="song1.mp3"></audio>

        <!-- Progress Bar -->
        <input type="range" id="progress" value="0" class="w-full mt-3">

        <!-- Controls -->
        <div class="flex justify-center gap-4 mt-4">
            <button onclick="prevSong()" class="text-2xl">‚èÆÔ∏è</button>
            <button onclick="playPause()" class="text-2xl" id="playPauseBtn">‚ñ∂Ô∏è</button>
            <button onclick="nextSong()" class="text-2xl">‚è≠Ô∏è</button>
        </div>

        <!-- Improved Volume Control -->
        <div class="flex justify-center gap-4 mt-4">
            <button onclick="decreaseVolume()" class="text-2xl">üîâ</button>
            <span id="volumeLevel" class="text-lg">100%</span>
            <button onclick="increaseVolume()" class="text-2xl">üîä</button>
        </div>
    </div>

    <script>
        const songs = [
            { title: "Song 1", src: "song1.mp3", img: "https://via.placeholder.com/100" },
            { title: "Song 2", src: "song2.mp3", img: "https://via.placeholder.com/100" }
        ];

        let currentSong = 0;
        const audio = document.getElementById("audioPlayer");
        const progress = document.getElementById("progress");
        const playPauseBtn = document.getElementById("playPauseBtn");
        const volumeLevel = document.getElementById("volumeLevel");

        function loadSong(index) {
            const song = songs[index];
            document.getElementById("songTitle").textContent = song.title;
            document.getElementById("albumArt").src = song.img;
            audio.src = song.src;
            audio.pause();
            playPauseBtn.textContent = "‚ñ∂Ô∏è";
        }

        function playPause() {
            if (audio.paused) {
                audio.play();
                playPauseBtn.textContent = "‚è∏Ô∏è";
            } else {
                audio.pause();
                playPauseBtn.textContent = "‚ñ∂Ô∏è";
            }
        }

        function nextSong() {
            currentSong = (currentSong + 1) % songs.length;
            loadSong(currentSong);
            playPause();
        }

        function prevSong() {
            currentSong = (currentSong - 1 + songs.length) % songs.length;
            loadSong(currentSong);
            playPause();
        }

        function increaseVolume() {
            if (audio.volume < 1) {
                audio.volume = Math.min(audio.volume + 0.1, 1);
                updateVolumeDisplay();
            }
        }

        function decreaseVolume() {
            if (audio.volume > 0.1) {
                audio.volume = Math.max(audio.volume - 0.1, 0);  // Ensures it can fully mute
            } else {
                audio.volume = 0;  // Mute completely
            }
            updateVolumeDisplay();
        }

        function updateVolumeDisplay() {
            volumeLevel.textContent = Math.round(audio.volume * 100) + "%";
        }

        // Auto-update progress bar
        audio.addEventListener("timeupdate", () => {
            progress.value = (audio.currentTime / audio.duration) * 100;
        });

        progress.addEventListener("input", () => {
            audio.currentTime = (progress.value / 100) * audio.duration;
        });

        // Initialize
        loadSong(currentSong);
        updateVolumeDisplay();
    </script>

</body>
</html>